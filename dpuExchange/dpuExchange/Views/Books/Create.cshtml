@model dpuExchange.Models.MainModel

@{
    ViewBag.Title = "Post";
}

    <h2>Create a Post</h2>
    <div class="row">
    <div class="span4">
    @using (Html.BeginForm("Create", "Books"))
    {
        @Html.ValidationSummary(true)
        <fieldset>
            <legend>Book Information</legend>
            <div class="editor-label">
                @Html.LabelFor(model => model.BooksModel.Isbn, "ISBN")
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.BooksModel.Isbn)
                @Html.ValidationMessageFor(model => model.BooksModel.Isbn)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.BooksModel.Title)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.BooksModel.Title)
                @Html.ValidationMessageFor(model => model.BooksModel.Title)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.BooksModel.Author)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.BooksModel.Author)
                @Html.ValidationMessageFor(model => model.BooksModel.Author)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.BooksModel.Price)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.BooksModel.Price)
                @Html.ValidationMessageFor(model => model.BooksModel.Price)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.BooksModel.Condition)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.BooksModel.Condition)
                @Html.ValidationMessageFor(model => model.BooksModel.Condition)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.BooksModel.Comments)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.BooksModel.Comments)
                @Html.ValidationMessageFor(model => model.BooksModel.Comments)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.BooksModel.ClassCode, "Department Code")
            </div>
            <div class="editor-field">
                @{
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            dictionary.Add("<Select Department>", "");
                            dictionary.Add("ANTH", "1");
                            dictionary.Add("ARAB", "2");
                            dictionary.Add("ARMY", "3");
                            dictionary.Add("ARTH", "4");
                            dictionary.Add("ARTS", "5");
                            dictionary.Add("ASIA", "6");
                            dictionary.Add("BIO", "7");
                            dictionary.Add("BLST", "8");
                            dictionary.Add("CFT", "9");
                            dictionary.Add("CHEM", "10");
                            dictionary.Add("CHIN", "11");
                            dictionary.Add("CLST", "12");
                            dictionary.Add("COMM", "13");
                            dictionary.Add("CSC", "14");
                            dictionary.Add("ECON", "15");
                            dictionary.Add("EDUC", "16");
                            dictionary.Add("ENG", "17");
                            dictionary.Add("FILM", "18");
                            dictionary.Add("FREN", "19");
                            dictionary.Add("GEOS", "20");
                            dictionary.Add("GERM", "21");
                            dictionary.Add("GRK", "22");
                            dictionary.Add("HIST", "23");
                            dictionary.Add("HONR", "24");
                            dictionary.Add("ITAL", "25");
                            dictionary.Add("JAPN", "26");
                            dictionary.Add("KINS", "27");
                            dictionary.Add("LAT", "28");
                            dictionary.Add("MATH", "29");
                            dictionary.Add("MUS", "30");
                            dictionary.Add("PE", "31");
                            dictionary.Add("PHIL", "32");
                            dictionary.Add("PHYS", "33");
                            dictionary.Add("POLS", "34");
                            dictionary.Add("PSY", "35");
                            dictionary.Add("REL", "36");
                            dictionary.Add("RUS", "37");
                            dictionary.Add("SOC", "38");
                            dictionary.Add("SPAN", "39");
                            dictionary.Add("UNIV", "40");
                            dictionary.Add("W S", "41");
                            dictionary.Add("OTHER", "42");
                            
                            SelectList list = new SelectList(dictionary, "value", "key");
                }
                @Html.DropDownListFor(model => model.BooksModel.ClassCode, list)
            </div>
            <input class="btn" type="submit" value="Create" />
        </fieldset>
        }

    </div>

    <div class="row nav-collapse" style="float:left; margin-top:75px;">
            <img id="imageLookup" style="width:120px; height:160px;"   src="../../../Content/Images/imageISBN.png" onerror="this.src='../../../Content/Images/imageISBN.png';"/>
    </div>

    <div class="row">
        <div class="span4 offset2">
        <br />
            <div class="nav-collapse">
                <legend>Enter title to search for ISBN</legend> 
                @Html.TextBoxFor(m => m.SearchModel.SearchByTitle, new { @class = "search-query" })
                <a id="searchForISBN"  class="btn"><i class="icon-search"></i>  Search</a> 
            </div>
            <div style="margin-top:15px; padding-right:40px;  height:570px; width:auto; overflow:auto;" id="searchResults">
                <p id="results"></p>
            </div>
        </div>
    </div>
</div>

<!-------------------------------------------This is the begining of javascript functions--------------------------------------->
<!------------------------------------Using xml2json.js to convert the returned xml to parsed json object----------------------->

<script src="../../../Scripts/jquery.xml2json.js" type="text/javascript"></script>
<script type="text/javascript">
    var $ = jQuery,
    currentResult = 0,
    numResults = 0,
    data;
    function updateISBN() {
        var isbn = $("#BooksModel_Isbn").val();
        $("#imageLookup").attr("src", "http://covers.openlibrary.org/b/isbn/" + isbn + "-M.jpg?default=false");
    }
    /* Updates book cover image on BooksModel_ISBN textbox change */
    $("#BooksModel_Isbn").change(function () {
        var isbn = $("#BooksModel_Isbn").val();
        $("#imageLookup").attr("src", "http://covers.openlibrary.org/b/isbn/" + isbn + "-M.jpg?default=false");
    });
    /*Detects Isbn search button click. Calls Books/searchForISBN and dynamically appends results to view if controller action 
    returns results. */
    $("#searchForISBN").click(function () {
        currentResult = 0;
        numResults = 0;
        $("#results").empty();
        var title = $("#SearchModel_SearchByTitle").val();
        $.ajax({
            url: '/Books/searchForISBN',
            type: 'POST',
            data: { titleSearch: title },
            success: function (result) {
                data = $.xml2json(result);
                numResults = data.BookList.shown_results;
                if (numResults <= 3) {
                    for (var i = currentResult; i < numResults; i++) {
                        $("#results").append('<button style="float:right" class="use-this-btn btn btn-success">Use</button>');
                        $("#results").append('<b> Title: </b><p>' + data.BookList.BookData[i].Title + '</p>');
                        $("#results").append('<b> Author: </b><p>  ' + data.BookList.BookData[i].AuthorsText + '</p>');
                        $("#results").append('<b> ISBN: </b><p>  ' + data.BookList.BookData[i].isbn + '</p>');
                        $("#results").append('<b> ISBN-13:  </b><p> ' + data.BookList.BookData[i].isbn13 + '</p>');
                        $("#results").append('<hr />');
                        $("#results").append('<br />');
                    }
                }
                else {
                    for (var i = currentResult; i < 3; i++) {
                        $("#results").append('<button style="float:right" class="use-this-btn btn btn-success">Use</button>');
                        $("#results").append('<b> Title: </b> <p> ' + data.BookList.BookData[i].Title + '</p>');
                        $("#results").append('<b> Author:</b> <p>  ' + data.BookList.BookData[i].AuthorsText + '</p>');
                        $("#results").append('<b> ISBN: </b> <p> ' + data.BookList.BookData[i].isbn + '</p>');
                        $("#results").append('<b> ISBN-13: </b> <p> ' + data.BookList.BookData[i].isbn13 + '</p>');
                        $("#results").append('<hr />');
                        $("#results").append('<br />');
                        currentResult = i + 1;
                    }
                    $("#results").append('<a onclick="moreResults()" id="showMoreBtn"> Show All -> </a>');
                }
            },
            error: function (result) {
                $(".alert-error").fadeIn(500);
                $(".alert-error").delay(2000).fadeOut(3000);
                $('#sendBtn').removeAttr('disabled');
            }
        });
    });
    /* Takes item's ISBN number and copies it to the create form */
    $(".use-this-btn").live('click', function () {
        var element1 = this.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling;
        var element2 = this.nextElementSibling.nextElementSibling;
        var title = $(element2).text();
        var isbn = $(element1).text();
        isbn = $.trim(isbn);
        title = $.trim(title);
        $("#BooksModel_Title").val(title);
        $("#BooksModel_Isbn").val(isbn);
        updateISBN();
    });
    /* Dynamically appends all results found by ISBN lookup */
    function moreResults() {
        for (var x = currentResult; x <= numResults-1; x++) {
            $("#showMoreBtn").remove();
            $("#results").append('<button style="float:right" class="use-this-btn btn btn-success">Use</button>');
            $("#results").append('<b> Title:</b><p>' + data.BookList.BookData[x].Title + '</p>');
            $("#results").append('<b> Author:</b><p>' + data.BookList.BookData[x].AuthorsText + '</p>');
            $("#results").append('<b> ISBN:</b><p>' + data.BookList.BookData[x].isbn + '</p>');
            $("#results").append('<b> ISBN-13:</b><p>' + data.BookList.BookData[x].isbn13 + '</p>');
            $("#results").append('<hr />');
            $("#results").append('<br />');
            currentResult = x + 1;
        }
    }
    
</script>

